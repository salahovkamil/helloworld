Где что находится:

1. Паттерны проектирования:
- Стратегия: Интерфейс AttackStrategy и его реализации MageAttackStrategy и MonsterAttackStrategy.
  
- Фабрика: Класс CharacterFactory, который отвечает за создание персонажей.


2. Шаблонный класс CharacterList:
   - Этот класс предоставляет функциональность для хранения и управления списком персонажей. Он принимает тип T, который должен быть производным от Character (можно произвести дальнейшую проверку, используя static_assert, но в данном случае это упрощено).
   - Методы включают addCharacter для добавления нового персонажа, getCharacter для доступа по индексу и size для получения количества персонажей.
 
3. Циклы:
- Цикл while используется в методе fight класса Battle, который продолжает бой до тех пор, пока оба персонажа имеют здоровье.

4. Классы:
- Character: Базовый класс для персонажей.
- CharacterFactory: Фабрика для создания объектов персонажей.
- Battle: Класс для организации битвы.
- AttackStrategy: Интерфейс для стратегий атаки.
- MageAttackStrategy и MonsterAttackStrategy: Классы, реализующие стратегии атаки.

5. Функции:
- Метод attack в классе Character.
- Методы в классе CharacterFactory для создания магов и монстров.
- Метод fight в классе Battle.
- Функция loadCharactersFromFile для считывания персонажей из файла.
- Функция handleError для обработки ошибок.

6. Структуры:
- struct Spell: Используется для хранения информации о заклинаниях (не активно в коде, но показана для примера).

7. Считывание из файлов:
- Функция loadCharactersFromFile считывает имена и типы персонажей из файла (формат: имя тип).

8. Обработка ошибок:
- Используется try-catch для обработки ошибок при открытии файла и недостаточном количестве персонажей для битвы.

